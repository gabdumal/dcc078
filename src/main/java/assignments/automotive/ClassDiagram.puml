@startuml
'https://plantuml.com/class-diagram

left to right direction

package automotive_package as "Automotive" {

    package vehicle_package as "Vehicle" {

        package engine_package as "Engine" {

            enum EngineType{
                DIESEL,
                ELECTRIC,
                ETHANOL,
                GASOLINE,
                NATURAL_GAS
            }

            interface Engine {
                double costIncreasePercentage()
            }

            class Diesel implements Engine {
                + double costIncreasePercentage()
            }

            class Electric implements Engine {
                + double costIncreasePercentage()
            }

            class Ethanol implements Engine {
                + double costIncreasePercentage()
            }

            class Gasoline implements Engine {
                + double costIncreasePercentage()
            }

            class NaturalGas implements Engine {
                + double costIncreasePercentage()
            }

        }

        package model_package as "Model" {

            enum ModelType{
                HATCHBACK,
                PICKUP,
                SEDAN
            }

            abstract class Model {
                # double baseCost
                # Engine engine
                + Model(double baseCost)
                + void setBaseCost(double baseCost)
                + void setEngine(Engine engine)
                + {abstract} double calculateFinalCost()
            }
            Model::engine "1" o-- "1" Engine

            class Hatchback extends Model {
                - int doorsAmount
                + Hatchback(double baseCost)
                + void setDoorsAmount(int doorsAmount)
                + double calculateFinalCost()
            }

            class Sedan extends Model {
                + Sedan(double baseCost)
                + double calculateFinalCost()
            }

            class Pickup extends Model {
                - boolean hasCover
                + Pickup(double baseCost)
                + void setDoorsAmount(boolean hasCover)
                + double calculateFinalCost()
            }

        }

    }

    package store_package as "Store" {

        class User {
            - {static} final User instance
            - String username
            - String password
            - String name
            - String phoneNumber
            - String bankAccount

            + {static} User getInstance()
            + {static} void resetInstance()
            - void initializeInstance()
            + boolean isLoggedIn()
            + void setLoggedIn(boolean loggedIn)
            + String getUsername()
            + void setUsername(String username)
            + String getPassword()
            + void setPassword(String password)
            + String getName()
            + void setName(String name)
            + String getPhoneNumber()
            + void setPhoneNumber(String phoneNumber)
            + String getBankAccount()
            + void setBankAccount(String bankAccount)
        }

    }

    package services_package as "Services" {

        enum Status {
            NOT_STARTED
            RUNNING
            CANCELLED
            FINISHED
        }

        interface IService {
            void begin()
            Status getStatus()
            void cancel()
            void run()
        }

        class ServiceFactory {
            + {static} IService getService(String serviceName)
        }

        class LoginService implements IService {
            - Status status

            + User getUser()
            + void begin()
            + Status getStatus()
            + void cancel()
            + void run()
            + void informUsernameAndPassword(String username, String password)
        }

        class PurchaseService implements IService {
            - Model model
            - Status status

            + void begin()
            + Status getStatus()
            + void cancel()
            + void run()
            + void informModelAndEngine(ModelType modelType, EngineType engineType)
            - Engine getEngine(EngineType engineType)
            - Model getModel(ModelType modelType)
            + void informHatchbackDoorsAmount(int doorsAmount)
            + void informIfPickupHasCover(boolean hasCover)
            + double calculateFinalCost()
        }

        class ServiceError extends RuntimeException{
            + ServiceError(String message)
        }
    }

}

@enduml